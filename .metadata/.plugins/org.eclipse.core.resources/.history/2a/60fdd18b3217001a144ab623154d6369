package com.project.ProductService.controller;

import java.util.List;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.project.ProductService.model.Product;
import com.project.ProductService.model.Users;
//import com.project.ProductService.repository.ProductRepository;
import com.project.ProductService.service.ProductServiceImpl;
import com.project.ProductService.service.UserServiceImpl;

@RestController
@RequestMapping("/easy-buy/products")
@CrossOrigin("*")
public class ProductController {

	@Autowired
	ProductServiceImpl productService;
	
	private static final Logger LOGGER = LoggerFactory.getLogger(ProductController.class);

	@GetMapping
	public List<Product> getAllProductList() {
		LOGGER.info("Start");
		List<Product> productList = productService.getAllProductList();
//		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
//		String user = authentication.getName();
//		if (!user.equals("anonymousUser")) {
//			UserDetails userDetails = appUserDetailsService.loadUserByUsername(user);
//			String role = userDetails.getAuthorities().toArray()[0].toString();
//			if (role.equals("admin")) {
//				moviesList = moviesService.getMoviesListAdmin();
//			} else if (role.equals("user")) {
//				moviesList = moviesService.getMoviesListCustomer();
//			}
//		} else {
//			moviesList = moviesService.getMoviesListCustomer();
//		}
		LOGGER.info("End");
		return productList;
	}
	
	@PostMapping("/addNewProduct")
	public void addNewProduct(@RequestBody @Valid Product product) {
		LOGGER.info("Start");
		productService.saveNewProduct(product);
		LOGGER.info("End");
	}
	
	
//	@GetMapping("/sort/{sortCategory}")
//	public List<Product> sortProductList(@PathVariable("sortCategory") String category){
//		List<Product> sortedList = null;
//		System.out.println(category);
//		if(category == "name") {
//			System.out.println("name");
//			sortedList =  productService.sortListByName();
//		} if(category == "price") {
//			System.out.println("price");
//
//			sortedList =  productService.sortListByName();
//		} if(category == "availability") {
//			System.out.println("avali");
//
//			sortedList =  productService.sortListByName();
//		}
//		
//		return sortedList;
//	}
	
//	@GetMapping("/sort-by-name")
//	public List<Product> sortProductListByName(){
//		return productService.sortListByName();
//	}
//	
//	@GetMapping("/sort-by-price")
//	public List<Product> sortProductListByPrice(){
//		return productService.sortListByPrice();
//	}
//	
//	@GetMapping("/sort-by-availability")
//	public List<Product> sortProductListByAvailability(){
//		return productService.sortListByAvailability();
//	}
}
