package com.project.authenticationservice.testing;

import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;

import com.project.authenticationservice.exception.UserAlreadyExistsException;
import com.project.authenticationservice.model.Users;
import com.project.authenticationservice.repository.UserRepository;
import com.project.authenticationservice.service.AppUserDetailsService;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
@SpringBootTest
public class UserAuthenticationMockTest {

	private static final Logger LOGGER = LoggerFactory.getLogger(UserAuthenticationMockTest.class);
	UserRepository repository = Mockito.mock(UserRepository.class);
	AppUserDetailsService service = new AppUserDetailsService(repository);

	@Test
	public void mockTestLoadUserByUsername() {
		LOGGER.info("Start");
		when(repository.findByUserId("admin")).thenReturn(createUser());
		UserDetails user = service.loadUserByUsername("admin");
		String expected = "$2a$10$IoqonpxYeSWir9ir16Pb6.8sCa444mtsH6R6oH.ioWnHkpODsBsPS";
		assertEquals(expected, user.getPassword());
		LOGGER.info("End");
	}
	private Users createUser() {
		Users user = new Users(2,"admin","admin",21,"Male",735,"admin","$2a$10$IoqonpxYeSWir9ir16Pb6.8sCa444mtsH6R6oH.ioWnHkpODsBsPS","O","A","what is your Nick name","aa","what is your favorite food","aa","what is your favorite holiday spot","aa");
		return user;
	}
	@Test(expected = UsernameNotFoundException.class)
	public void testLoadByUserNameNotFoundException() throws UsernameNotFoundException {
		when(repository.findByUserId("rohith")).thenReturn(null);
		service.loadUserByUsername("rohith");
	}
	@Test(expected = UserAlreadyExistsException.class)
	public void testForUserExist() throws UserAlreadyExistsException {
		LOGGER.info("Start");
		Users user = new Users(2,"admin","admin",21,"Male",735,"admin","$2a$10$IoqonpxYeSWir9ir16Pb6.8sCa444mtsH6R6oH.ioWnHkpODsBsPS","O","A","what is your Nick name","aa","what is your favorite food","aa","what is your favorite holiday spot","aa");
		when(repository.findByUserId("admin")).thenReturn(user);
		service.signup(user);
		LOGGER.info("End");
	}
	@Test
	public void newSignUp() throws UserAlreadyExistsException {
		LOGGER.info("Start");
		when(repository.findByUserId("rohith")).thenReturn(null);
		Users user = new Users(2, "rohith", "narjala", 21,"Male",0, null,"rohith",
				"$2a$10$R/lZJuT9skteNmAku9Y7aeutxbOKstD5xE5bHOf74M2PHZipyt3yK",null,null,null,null,null,null,null);
		service.signup(user);
		LOGGER.info("End");

	}
}
