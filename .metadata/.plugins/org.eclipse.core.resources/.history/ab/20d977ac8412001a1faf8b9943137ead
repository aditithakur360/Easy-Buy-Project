package com.project.authenticationservice.service;


import java.util.HashSet;
import java.util.Set;

import javax.transaction.Transactional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.project.authenticationservice.exception.UserAlreadyExistsException;
import com.project.authenticationservice.model.Role;
import com.project.authenticationservice.model.Users;
import com.project.authenticationservice.repository.UserRepository;

@Service
public class AppUserDetailsService implements UserDetailsService {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(AppUserDetailsService.class);
	@Autowired
	UserRepository userRepository;

	public AppUserDetailsService(UserRepository userRepository) {
		super();
		this.userRepository = userRepository;
	}
	
	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Transactional
	public void signup(Users user) throws UserAlreadyExistsException {
		LOGGER.info("Start");
		if (userRepository.findByUsername(user.getUserId()) != null) { 
			LOGGER.info("End");
			throw new UserAlreadyExistsException();
		} else {
			Set<Role> roleList = new HashSet<Role>();
			roleList.add(new Role(1, "user"));
			user.setUserRole(roleList);
			userRepository.save(user);
			LOGGER.info("End");
		}
	}
}
